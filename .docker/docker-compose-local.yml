version: '3.3'

networks:
  frontend:
    driver: ${NETWORKS_DRIVER}
  backend:
    driver: ${NETWORKS_DRIVER}

services:
  ### NGINX #########################################
  application-nginx:
    container_name: application-nginx
    image: $IMAGE_PREFIX/nginx:$IMAGE_TAG
    build:
      context: ./application-nginx
      args:
        - PHP_UPSTREAM_CONTAINER=${NGINX_PHP_UPSTREAM_CONTAINER}
        - PHP_UPSTREAM_PORT=${NGINX_PHP_UPSTREAM_PORT}
        - http_proxy
        - https_proxy
        - no_proxy
    volumes:
      - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}${APP_CODE_CONTAINER_FLAG}
      - ${NGINX_SITES_PATH}:/etc/nginx/sites-available
      - ${NGINX_SSL_PATH}:/etc/nginx/ssl
    ports:
      - "${NGINX_HOST_HTTP_PORT}:80"
      - "${NGINX_HOST_HTTPS_PORT}:443"
    depends_on:
      - application-fpm
    networks:
      - frontend
      - backend

  ### POSTGRESS #########################################
#  application-postgres:
#    container_name: application-postgres
#    build:
#      context: ./application-postgres
#      args:
#        - POSTGRES_VERSION=${POSTGRES_VERSION}
#    volumes:
#      - ${DATA_PATH_HOST}/postgres:/var/lib/postgresql/data
#      - ${POSTGRES_ENTRYPOINT_INITDB}:/docker-entrypoint-initdb.d
#    ports:
#      - "${POSTGRES_PORT}:5432"
#    environment:
#      - POSTGRES_DB=${POSTGRES_DB}
#      - POSTGRES_USER=${POSTGRES_USER}
#      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
#      # - SONARQUBE_POSTGRES_INIT=${SONARQUBE_POSTGRES_INIT}
#      # - SONARQUBE_POSTGRES_DB=${SONARQUBE_POSTGRES_DB}
#      # - SONARQUBE_POSTGRES_USER=${SONARQUBE_POSTGRES_USER}
#      # - SONARQUBE_POSTGRES_PASSWORD=${SONARQUBE_POSTGRES_PASSWORD}
#    networks:
#      - backend